---
title: "R programming practice"
format: html
editor: visual
---

## Chapter 2

### 2.6 Feature Engineering

```{r}
score = read.csv("~/Desktop/jieun/R/R practice/data/score.csv")

# Creating new variable
score$total = score$math + score$kor
score$avg = (score$math + score$kor) / 2

# Over 80 becomes PASS less than 80 becomes FAIL
score$result = ifelse(score$avg > 80, "PASS", "FAIL")

# Number of PASS and FAIL
table(score$result)
# by gender
table(score$sex, score$result)

# Check
score
```

## 3. Exploratory Data Analysis

-   exploratory data analysis

    ```{r}
    #install.packages("datasauRus")
    library(datasauRus)
    library(ggplot2)
    library(dplyr)
    dino = datasaurus_dozen

    datasaurus_dozen |> 
      mutate(dataset = as.factor(dataset)) |> 
      filter(dataset == "dino") |> 
    ggplot(aes(x = x, y = y))+
      geom_point() +
      theme(legend.position = "none")+
      labs(title = NULL) 
    ```

### 5. Cafe data

```{r}
#install.packages("readxl")
library(readxl)
cafe = read_xlsx("~/Desktop/jieun/R/R practice/data/Cafe_Sales.xlsx")

# Check tail data
tail(cafe)

# Check NAs
table(is.na(cafe$order_id))
table(is.na(cafe$order_date))
table(is.na(cafe$category))
table(is.na(cafe$item))
table(is.na(cafe$price))

# Remove NAs
cafe = na.omit(cafe)
table(is.na(cafe))

# head()
head(cafe, n = 12)

# We can find order number by using unique function because it is possible that one person ordered several things and unique function will let us know just how many unique person ordered in the cafe.
nrow(cafe)
length(unique(cafe$order_id))
sort(unique(cafe$order_id), decreasing=TRUE)

unique(cafe$order_date)
unique(cafe$category)
unique(cafe$item)
unique(cafe$price)

# Menu sales number
sort(table(cafe$item), decreasing = TRUE)

# New data.frame
cafe_tr = data.frame(table(cafe$item))
head(cafe_tr)

cafe_item = subset.data.frame(cafe, select = c("item", "price"))
head(cafe_item)
sales_item = unique(cafe_item)

item_list = merge(cafe_tr, cafe_item, by.x = "Var1", by.y = "item")
head(item_list)

item_list$amount = item_list$Freq * item_list$price
head(item_list)
sum(item_list$amount)

# remove variable
#item_list <- item_list |> select(-amoung)

# Making new variable of weekday
cafe$weekday = weekdays(cafe$order_date)
head(cafe)
sort(table(cafe$weekday), decreasing = TRUE)

# Separating weekday and weekend
date_info = data.frame(weekday = c("Monday", "Tuesday", "Wednesday",
                                   "Thursday", "Friday", "Saturday",
                                   "Sunday"),
                       day = c("weekday", "weekday", "weekday",
                               "weekday", "weekday", "weekend",
                               "weekend"))
cafe = merge(cafe, date_info)
table(cafe$day)

# Season analysis
cafe$month = months(cafe$order_date)

for (i in 1:nrow(cafe)) {
  if (cafe$month[i] == "January") {
    cafe$season[i] = "winter"
  } else if(cafe$month[i] == "February") {
    cafe$season[i] = "winter"
  } 
  else if (cafe$month[i] == "March") {
  cafe$season[i] = "spring"
  } else if (cafe$month[i] == "April") {
  cafe$season[i] = "spring"
  } else if (cafe$month[i] == "May") {
  cafe$season[i] = "spring"
  }
  else if (cafe$month[i] == "June") {
    cafe$season[i] = "summer"
  } else if (cafe$month[i] == "July") {
    cafe$season[i] = "summer"
  } else if (cafe$month[i] == "August") {
    cafe$season[i] = "summer"
  }
  else if (cafe$month[i] == "September") {
    cafe$season[i] = "fall"
  } else if (cafe$month[i] == "November") {
    cafe$season[i] = "fall"
  } else if (cafe$month[i] == "December") {
    cafe$season[i] = "fall"
  }
  else
    cafe$season[i] = "winter"
}

# Same but simple code for the season
for (i in 1:nrow(cafe)) {
  if(cafe$month[i] == "December"|cafe$month[i] == "January"|
     cafe$month[i] == "February") {
    cafe$season[i] = "winter"
  } else if(cafe$month[i] == "March"|cafe$month[i] == "April"|
            cafe$month[i] == "May") {
    cafe$season[i] = "spring"
  } else if(cafe$month[i] == "June"|cafe$month[i] == "July"|
            cafe$month[i] == "August") {
    cafe$season[i] = "summer"
  } else
    cafe$season[i] = "fall"
}

# See the data by season
table(cafe$season)


# Check
str(cafe)
```

## Visualization

```{r}
library(ggplot2)
head(iris)
iris |> ggplot(aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()

#geom_text()
iris |> ggplot(aes(x=Sepal.Length, y=Sepal.Width, label = Species)) +
  geom_point() + geom_text(size = 3, hjust = 0, nudge_x = 0.05)

#different expression
base = base2 = iris |> ggplot(aes(x=Sepal.Length, y=Sepal.Width)) + geom_point() 
# x axis reverse
base + scale_x_reverse()
# y axis reverse
base + scale_y_reverse()
# x axis from 0 to 10
base + xlim(0,10)
# y axis from 0 to 5
base + ylim(0, 5)

base + labs(title = "Iris Scatter Plot") +
  theme(
    plot.title = element_text(size = rel(2)),
    axis.line.x.bottom = element_line(color = "black"),
    axis.line.y.left = element_line(color = "black")) 


```

```{r}
sample = data.frame(x = round(rnorm(3, 50, 10), 0),
                    y = round(rnorm(3, 57, 3), 0),
                    category = c("a", "b", "c"))

sample |> ggplot(aes(x = x, y = y)) +
  geom_line(size = 1, color = "#20639B") + geom_point()
```

### Visualize Cafe Data

```{r}
cafe
target = data.frame(table(cafe$category))

#visualization
# by category
target |> ggplot(aes(x = Var1, y = Freq)) +
  geom_col() +
  geom_text(label = paste0("total:", target$Freq), nudge_y = 1000)

# by month sales
cafe$date_ym = format(cafe$order_date, "%Y-%m")
target = data.frame(table(cafe$date_ym))
target_12 = tail(target, 12) #Recent 12 month data
target_12 |> ggplot(aes(x= Var1, y = Freq, group = 1)) +
  geom_line(size = 1, color = "#000000",
            linetype = 3)

# recent 12 month data visualization with ggplot2
tail(target, 12) |> ggplot(aes(x = Var1, y = Freq, group = 1)) +
  geom_line(size = 1, color = "#000000", linetype = 3) +
  geom_point(color = "#173F5F") +
  geom_text(aes(label = Freq), nudge_y = 200, size = 3) 

# by day of the week
target = data.frame(table(cafe$weekday))
target$Var1 = factor(target$Var1, 
                     levels = c("Monday", "Tuesday", "Wednesday",
                                "Thursday", "Friday", "Saturday",
                                "Sunday"))
target = target[order(target$Var1),]
target$por = target$Freq/sum(target$Freq)*100 #proportion
target |> ggplot(aes(x="", y=por, fill = Var1)) +
  geom_col()

target |> ggplot(aes(x = "", y = por, fill = Var1)) +
  geom_col() +
  coord_polar(theta = "y")

target |> ggplot(aes(x = "", y = por, fill = Var1)) +
  geom_col() +
  coord_polar(theta = "y") + 
  geom_text(aes(label = paste0(Var1, "\n", round(por, 2), "%")),
            position = position_stack(vjust = 0.5), size = 2.5)

target |> ggplot(aes(x = "", y = por, fill = Var1)) +
  geom_col() +
  coord_polar(theta = "y") + 
  geom_text(aes(label = paste0(round(por, 2), "%")),
            position = position_stack(vjust = 0.5), size = 2.5,
            col = "white") +
  scale_fill_manual(values = c("#000000", "#222222", "#444444", 
                               "#666666", "#888888", "#999999")) +
  theme(legend.position = "none",
        panel.background = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank())
```

### The effect of the advertisement

```{r}
library(readr)
library(dplyr)
adver = read_xlsx("~/Desktop/jieun/R/R practice/data/abtest.xlsx")
head(adver)
table(adver$city1) 

head(adver)
tail(adver)
table(is.na(adver$city1))
table(is.na(adver$city2))
table(is.na(adver$age))
table(is.na(adver$sex))
table(is.na(adver$type))
table(is.na(adver$open))
table(is.na(adver$click))
table(is.na(adver$conversion))
table(is.na(adver$sales))

adver = adver[adver$sales != "NA",] # remove the character "NA"
adver
str(adver$sales)
adver$sales = as.numeric(adver$sales) # sales sould be changed to numerical variable
str(adver$sales)

unique(adver$city1)
unique(adver$city2)
unique(adver$age)
unique(adver$sex)
unique(adver$type)

# see the numerical data
summary(adver$open)
summary(adver$click)
summary(adver$conversion)
summary(adver$sales)
```

### Analysis by map

```{r}
install.packages("raster")
library(raster)

korea = getData(name = "GADM", country = "kor", level = 0)
korea_sido = getData(name = "GADM", country = "kor", level = 1)
korea_sigungu = getData(name = "GADM", country = "kor", level = 2)

korea$GID_0
korea$NAME_0

korea_sido$NAME_1
korea_sido$VARNAME_1
korea_sido$NL_NAME_1
korea_sido$TYPE_1
korea_sido$ENGTYPE_1
korea_sido$HASC_1

seoul = korea_sigungu[korea_sigungu$NAME_1 == "Seoul",]
seoul$GID_2
seoul$NAME_2
seoul$NL_NAME_2
seoul$TYPE_2
seoul$ENGTYPE_2

p1 = korea |> ggplot() +
  geom_polygon(aes(x = long, y = lat, group = group),
               fill = "white", color = "black") +
  labs(title = "KOREA") +
  theme(axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.text = element_blank())

p2 = korea_sido |> ggplot() +
  labs(title = "Sido") +
  geom_polygon(aes(x = long, y = lat, group = group),
               fill = "white", color = "black") +
  theme(axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.text = element_blank())

p3 = korea_sigungu |> ggplot() +
  labs(title = "Sigungu") +
  geom_polygon(aes(x = long, y = lat, group = group),
               fill = "white", color = "black") +
  theme(axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.text = element_blank())
```

### T-test and hypothesis test

H0) There is mean difference between A and B group

H1) There is no mean difference between A and B group

```{r}
adver |> ggplot(aes(x = type, y = open)) +
  geom_boxplot() +
  labs(title = "numter of opening email") +
  theme(title = element_text(size = 15, face = "bold"),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.text = element_blank())

adver |> ggplot(aes(x = type, y = click)) +
  geom_boxplot() +
  labs(title = "numter of clicking advertisement") +
  theme(title = element_text(size = 15, face = "bold"),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.text = element_blank())

adver |> ggplot(aes(x = type, y = conversion)) +
  geom_boxplot() +
  labs(title = "numter of conversion to purchase") +
  theme(title = element_text(size = 15, face = "bold"),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.text = element_blank())

A_GROUP = subset.data.frame(x = adver, subset = c(type == "A_GROUP"))
B_GROUP = subset.data.frame(x = adver, subset = c(type == "B_GROUP"))

# Normality Test
#H0) A_GROUP has normal distribution
#H1) A_GROUP has non-normal distribution
install.packages("nortest")
library(nortest)
ad.test(A_GROUP$open)
ad.test(B_GROUP$open)

ad.test(A_GROUP$click)
ad.test(B_GROUP$click)

ad.test(A_GROUP$conversion)
ad.test(B_GROUP$conversion)

library(car)
leveneTest(y = adver$open, group = factor(adver$type))
leveneTest(y = adver$click, group = factor(adver$type))
leveneTest(y = adver$conversion, group = factor(adver$type))

#T-test
t.test(A_GROUP$open, B_GROUP$open) #there is no difference between two groups for the number of opening the email 

t.test(A_GROUP$click, B_GROUP$click)
t.test(A_GROUP$conversion, B_GROUP$conversion)
```

### ggplot2

```{r}
kyungki = subset.data.frame(x = adver, subset = c(city1 == "경기도"))
kyungki_A = subset.data.frame(x = kyungki, subset = c(type == "A_GROUP"))
kyungki_B = subset.data.frame(x = kyungki, subset = c(type == "B_GROUP"))

#Normality Test
shapiro.test(kyungki_A$open)
shapiro.test(kyungki_B$open)

shapiro.test(kyungki_A$click)
shapiro.test(kyungki_B$click)

shapiro.test(kyungki_A$conversion)
shapiro.test(kyungki_B$conversion)

#Homoscedasticity Test
library(car)
leveneTest(y = kyungki$open, group = factor(kyungki$type))
leveneTest(y = kyungki$click, group = factor(kyungki$type))
leveneTest(y = kyungki$conversion, group = factor(kyungki$type))
wilcox.test(open ~ type, kyungki)
wilcox.test(click ~ type, kyungki)
wilcox.test(conversion ~ type, kyungki)

#visualization
sido_key = data.frame(NAME_1 = korea_sido$NAME_1,
                      KOR = c("부산광역시", "충청북도", "충청남도", "대구광역시",
                              "대전광역시", "강원도", "광주광역시", "경기도",
                              "경상북도", "경상남도", "인천광역시",
                              "제주특별자치도", "전라북도", "전라남도",
                              "세종특별자치시", "서울특별시", "울산광역시"),
                      RESULT = 1)

## Merge data
korea_sido@data$id = rownames(korea_sido@data)
korea_sido@data = merge(korea_sido@data, sido_key, by = "NAME_1")
koreaDF = fortify(korea_sido)
koreaDF = merge(koreaDF, korea_sido@data, by = "id")

### ggplot 2
ggplot() +
  geom_polygon(data = koreaDF, aes(x = long, y = lat, group = group, fill = RESULT),
               color = "black") +
  labs(title = "Differences in performance for the two groups by region") +
  theme(legend.position = "none",
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.text = element_blank())
  

```

## Chapter 7

```{r}
install.packages("quantmod")
library(quantmod)

KOSPI = getSymbols("^KS11", from = "2001-01-01", to = Sys.time(), auto.assign = FALSE)

SEC = getSymbols("005930.KS", from = "2015-01-01",
                 to = Sys.time(), auto.assign = FALSE)

APPLE = getSymbols("AAPL", from = "2015-01-01",
                 to = Sys.time(), auto.assign = FALSE)

TESLA = getSymbols("TSLA", from = "2015-01-01",
                   tp = Sys.time(), auto.assign = FALSE)


quantmod::chartSeries(SEC)

#Change the xts timeseries data to data frame
str(KOSPI)
str(SEC)
sample = data.frame(date = time(KOSPI), KOSPI, growth = ifelse(Cl(KOSPI) > Op(KOSPI), "up",
                                                               "down"))
sample_samsung = data.frame(date = time(SEC), SEC, 
                            growth = ifelse(Cl(SEC) > Op(SEC), "up", "down"))

sample_apple = data.frame(date = time(APPLE), APPLE, 
                            growth = ifelse(Cl(APPLE) > Op(APPLE), "up", "down"))

sample_tesla = data.frame(date = time(TESLA), TESLA, 
                            growth = ifelse(Cl(TESLA) > Op(TESLA), "up", "down"))

#Change the column name to make it simple
colnames(KOSPI)
colnames(sample) = c("date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "growth")
colnames(sample_samsung) = c("date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "growth")
colnames(sample_apple) = c("date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "growth")
colnames(sample_tesla) = c("date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "growth")

sample
summary(sample)

sample |> ggplot(aes(x=date)) + geom_line(aes(y = Low))
sample[sample$date >= "2020-01-01",] |> ggplot(aes(x = date)) + geom_line(aes(y = Low))

#linerange() will mark high and low price
sample[sample$date >= "2020-01-01",] |> ggplot(aes(x=date)) +
  geom_linerange(aes(ymin = Low, ymax = High))

#geom_rect()
sample[sample$date >= "2020-01-01",] |> ggplot(aes(x=date)) +
  geom_linerange(aes(ymin = Low, ymax = High)) +
  geom_rect(aes(xmin = date - 0.3,
                xmax = date + 0.3,
                ymin = pmin(Open, Close),
                ymax = pmax(Open, Close),
                fill = growth)) +
  guides(fill = "none") +
  scale_fill_manual(values = c("down" = "blue", "up" = "red")) +
  labs(
    title = "KOSPI",
    subtitle = "From 2020-01-01 to 2024-02-03"
  ) +
  theme(plot.title = element_text(face = "bold"),
        plot.subtitle = element_text(hjust = 1),
        axis.title = element_blank(),
        axis.line.x.bottom = element_line(color = "grey"),
        axis.ticks = element_line(color = "grey"),
        axis.line.y.left = element_line(color = "grey"),
        plot.background = element_rect(fill = "white"),
        panel.background = element_rect(fill = "white"))

sample|> ggplot(aes(x=date)) +
  geom_linerange(aes(ymin = Low, ymax = High)) +
  geom_rect(aes(xmin = date - 0.3,
                xmax = date + 0.3,
                ymin = pmin(Open, Close),
                ymax = pmax(Open, Close),
                fill = growth)) +
  guides(fill = "none") +
  scale_fill_manual(values = c("down" = "blue", "up" = "red")) +
  labs(
    title = "KOSPI",
    subtitle = "From 2020-01-01 to 2024-02-03"
  ) +
  theme(plot.title = element_text(face = "bold"),
        plot.subtitle = element_text(hjust = 1),
        axis.title = element_blank(),
        axis.line.x.bottom = element_line(color = "grey"),
        axis.ticks = element_line(color = "grey"),
        axis.line.y.left = element_line(color = "grey"),
        plot.background = element_rect(fill = "white"),
        panel.background = element_rect(fill = "white"))


#SAMSUNG 
sample_samsung |> ggplot(aes(x=date)) +
  geom_linerange(aes(ymin = Low, ymax = High)) +
  geom_rect(aes(xmin = date - 0.3,
                xmax = date + 0.3,
                ymin = pmin(Open, Close),
                ymax = pmax(Open, Close),
                fill = growth)) +
  guides(fill = "none") +
  scale_fill_manual(values = c("down" = "blue", "up" = "red")) +
  labs(
    title = "SAMSUNG",
    subtitle = "From 2015-01-02 to 2024-02-03"
  ) +
  theme(plot.title = element_text(face = "bold"),
        plot.subtitle = element_text(hjust = 1),
        axis.title = element_blank(),
        axis.line.x.bottom = element_line(color = "grey"),
        axis.ticks = element_line(color = "grey"),
        axis.line.y.left = element_line(color = "grey"),
        plot.background = element_rect(fill = "white"),
        panel.background = element_rect(fill = "white"))

#APPLE
sample_apple |> ggplot(aes(x=date)) +
  geom_linerange(aes(ymin = Low, ymax = High)) +
  geom_rect(aes(xmin = date - 0.3,
                xmax = date + 0.3,
                ymin = pmin(Open, Close),
                ymax = pmax(Open, Close),
                fill = growth)) +
  guides(fill = "none") +
  scale_fill_manual(values = c("down" = "blue", "up" = "red")) +
  labs(
    title = "APPLE",
    subtitle = "From 2015-01-02 to 2024-02-03"
  ) +
  theme(plot.title = element_text(face = "bold"),
        plot.subtitle = element_text(hjust = 1),
        axis.title = element_blank(),
        axis.line.x.bottom = element_line(color = "grey"),
        axis.ticks = element_line(color = "grey"),
        axis.line.y.left = element_line(color = "grey"),
        plot.background = element_rect(fill = "white"),
        panel.background = element_rect(fill = "white"))

#TESLA
sample_tesla |> ggplot(aes(x=date)) +
  geom_linerange(aes(ymin = Low, ymax = High)) +
  geom_rect(aes(xmin = date - 0.3,
                xmax = date + 0.3,
                ymin = pmin(Open, Close),
                ymax = pmax(Open, Close),
                fill = growth)) +
  guides(fill = "none") +
  scale_fill_manual(values = c("down" = "blue", "up" = "red")) +
  labs(
    title = "TESLA",
    subtitle = "From 2015-01-02 to 2024-02-03"
  ) +
  theme(plot.title = element_text(face = "bold"),
        plot.subtitle = element_text(hjust = 1),
        axis.title = element_blank(),
        axis.line.x.bottom = element_line(color = "grey"),
        axis.ticks = element_line(color = "grey"),
        axis.line.y.left = element_line(color = "grey"),
        plot.background = element_rect(fill = "white"),
        panel.background = element_rect(fill = "white"))
```

### Stat package

```{r}

```
